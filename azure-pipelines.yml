## MFA pipeline. 

name: $(Build.DefinitionName).$(BuildID).$(Rev:.rr)

trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  major: '0.0.'
  # define b as a counter with the prefix as variable a, and seed as 10.
  minor: $[counter(variables['major'], 1)]

steps:

- script: |
    ls -al $(Pipeline.Workspace)
    pushd gluu-server/opt/gluu/jetty/oxauth/custom
    tar -czv --owner=root --group=root -f $(Pipeline.Workspace)/s/gluu-server/opt/dist/signincanada/custom.tgz *
    popd
  displayName: 'Packaging UI'
  continueOnError: false

- script: |
    echo 'Downloading AppInsights SDK'
    wget https://github.com/microsoft/ApplicationInsights-Java/releases/download/2.6.1/applicationinsights-web-auto-2.6.1.jar \
       -P gluu-server/opt/dist/signincanada
    echo 'Downloading AppInsights Agent'
    wget https://github.com/microsoft/ApplicationInsights-Java/releases/download/2.6.1/applicationinsights-agent-2.6.1.jar \
       -P gluu-server/opt/azure
  displayName: 'Downloading AppInsights'
  continueOnError: false

- script: |
    echo 'Downloading Latest Amazon Corretto'
    wget https://corretto.aws/downloads/resources/8.242.08.1/amazon-corretto-8.242.08.1-linux-x64.tar.gz \
      -O gluu-server/opt/dist/corretto/amazon-corretto-8-x64-linux-jdk.tar.gz
    wget https://corretto.aws/downloads/resources/8.242.08.1/amazon-corretto-8.242.08.1-linux-x64.tar.gz.sig \
      -O gluu-server/opt/dist/corretto/amazon-corretto-8-x64-linux-jdk.tar.gz.sig
    echo 'Checking file integritiy'
    gpg --import gluu-server/opt/dist/corretto/B04F24E3.pub
    gpg gluu-server/opt/dist/corretto/amazon-corretto-8-x64-linux-jdk.tar.gz.sig
  displayName: 'Downloading Latest Amazon Corretto'
  continueOnError: false

- script: |
    echo 'Downlaoding the Gluu 4.1.3 patch'
    wget https://ox.gluu.org/maven/org/gluu/oxauth-server/4.1.3.Final/oxauth-server-4.1.3.Final.war \
      -O $(Agent.TempDirectory)/oxauth.war
    echo 'Checking download integrity'
    echo "657da0181c34041bfceedef9f0f33b923c50de0d5a3c8c6f973b57c8b1b6c937" $(Agent.TempDirectory)/oxauth.war | sha256sum -c
    result=$?
    if [ $result -ne 0 ] ; then
       echo "Failed"
       exit 1
    fi
    echo 'Passed'
    mkdir -p gluu-server/opt/dist/gluu/patch
    echo 'Extracting the fixed Audit Logger'
    unzip $(Agent.TempDirectory)/oxauth.war WEB-INF/classes/org/gluu/oxauth/audit/ApplicationAuditLogger.class -d gluu-server/opt/dist/gluu/patch
  displayName: 'Obtaining audit log patch'
  continueOnError: false

- script: |
    echo 'packaging tarball'
    chmod 755 $(find . -type d -print)
    chmod 644 $(find . -type f -print)
    chmod 700 gluu-server/opt/dist/signincanada/postinstall.sh
    chmod 700 gluu-server/opt/dist/scripts/azure/keyvault.sh
    chmod 700 gluu-server/install/community-edition-setup/setup.py
    pushd gluu-server
    tar -czv --owner=root --group=root -f $(Build.ArtifactStagingDirectory)/SIC-MFA-0.0.$(minor).tgz --exclude='opt/gluu' etc install opt
    openssl sha256 $(Build.ArtifactStagingDirectory)/SIC-MFA-0.0.$(minor).tgz > $(Build.ArtifactStagingDirectory)/SIC-MFA-0.0.$(minor).tgz.sha
    popd
  displayName: 'Packaging tarball'
  continueOnError: true

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)'
    artifact: 'mfa'
    publishLocation: 'pipeline'